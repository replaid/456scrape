#!/usr/bin/env ruby

require 'capybara/poltergeist'
require 'rspec/expectations'
require 'capybara/rspec'
require 'open-uri'

# Given a username and password, retrieves all event attendee data from 123Signup.
#
# Usage:
#
# csv_result = Scrape123Signup.new(
#   username: ENV['LOGIN_USER_1'],
#   password: ENV['LOGIN_PASSWORD_1']
# ).call
# 
# puts csv_result
class Scrape123Signup
  include ::RSpec::Matchers
  include ::Capybara::RSpecMatchers

  LOGIN_URL = 'https://redirect.123signup.com/login'
  ONLOAD_REDIRECT_XPATH = "//body[contains(@onload,'pageLoadRedirect')]"
  THIRTY_SECONDS = 30

  def initialize(username:, password:)
    @username = username
    @password = password
    set_up_capybara
  end

  def set_up_capybara
    options = {}
    Capybara.register_driver :poltergeist do |app|
      Capybara::Poltergeist::Driver.new(app, options)
    end
    Capybara.current_driver = :poltergeist
    Capybara.javascript_driver = :poltergeist
    Capybara.run_server = false
    Capybara.default_max_wait_time = THIRTY_SECONDS
  end

  def log_in
    session.visit LOGIN_URL
    session.fill_in 'username', with: @username
    session.fill_in 'password', with: @password
    session.click_link 'SignInButton'
  end

  def session
    Capybara.current_session
  end

  def extract_redirect_url
    onload_value = session.find('body')['onload']
    lines = onload_value.split(';')
    redirect_destination_abs_path = lines.grep(/pageLoadRedirect/).first.sub(/^.*"([^"]*)".*$/, '\1')
    session.current_host + redirect_destination_abs_path
  end

  def fetch_csv_response_body
    session.assert_selector('body')
    expect(session.find('body')).to (
      have_text(/^SignupMemberID,/)
    ).or(
      match_xpath(ONLOAD_REDIRECT_XPATH)
    )
    if session.find('body').matches_xpath?(ONLOAD_REDIRECT_XPATH)
      csv_url = extract_redirect_url
      session.visit(csv_url)
      STDERR.puts "Report generated by 123Signup. Fetching CSV..."
      csv_response_body = open(csv_url).read
      STDERR.puts "CSV found. First 10 lines:"
      STDERR.puts session.body.split("\n")[0..10].join("\n")
    else
      csv_response_body = session.body
    end
    csv_response_body
  end

  def extract_csv_from_full_response(full_response)
    strip_regex = /\A<html.*<pre[^>]*>(SignupMemberID,.*)<\/pre><\/body><\/html>\z/m
    full_response.sub(strip_regex, '\1')
  end

  def call
    csv_result = nil

    session = Capybara.current_session
    STDERR.puts 'Logging in to 123Signup...'
    log_in
    session.within_frame('FrameApplication') do
      session.within_frame('contents') do
        session.within_frame('MenuList') do
          STDERR.puts 'Navigating to reports...'
          session.click_link 'Event Reports'
        end
        session.within_frame('Results') do
          session.click_link('Event Attendee Data')
          session.click_button 'BottomDownloadReport'
          STDERR.puts 'Waiting on report download...'
          csv_result = extract_csv_from_full_response(fetch_csv_response_body)
        end
      end
    end
    csv_result
  end

  # Returns filenames for successive screenshots. The resulting filenames sort
  # by date and sequence and include descriptive labels.
  #
  # Usage example:
  #
  # shot_filenames = ScreenshotFilenameSequence.new
  # ...
  # session.save_screenshot(shot_filenames.next(:after_click_event_attendee_data))
  #
  class ScreenshotFilenameSequence
    def initialize
      @counter = 0
    end

    def next(label)
      @counter += 1
      Time.now.utc.iso8601 + '-' + ('%02d' % @counter) + '-' + label.to_s + '.png'
    end
  end
end

csv_result = Scrape123Signup.new(
  username: ENV['LOGIN_USER_1'],
  password: ENV['LOGIN_PASSWORD_1']
).call

# Now we have csv_result
puts csv_result
